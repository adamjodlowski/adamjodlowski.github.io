<!DOCTYPE html>
<html>
<head>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>How to get started with Android programming</title>
<link rel="stylesheet" href="http://app.classeur.io/base-min.css" />
<script type="text/javascript" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS_HTML"></script>
</head>
<body><div class="export-container"><h1 id="how-to-get-started-with-android-programming">How to get started with Android programming</h1>
<p>Android programming has undergone many changes over the years, both in tooling we use and features available on the platform. Today, typical development environment and applications we are able to create are anything like they used to be. Long gone is Eclipse IDE replaced by Android Studio, virtual device emulators are getting faster and more feature rich, and lastly, the amount of knowledge sources and third-party helper libraries is finally at point where you can easily pick up Android development basics in few hours of work.</p>
<p>This tutorial will teach you how to setup and run Android project using Android Studio on OS X. It will be a starter project for all other tutorials. Basic concepts of Android and its development process will not be explained in every following tutorial, so please refer to this post as needed.</p>
<h2 id="prerequisites">Prerequisites</h2>
<p>Android programming is primarily done in Java 1.6 programming language – at least intermediate knowledge is necessary to fully understand concepts specific to Android that will be introduced throughout the tutorials.</p>
<blockquote>
<p>Development tools and code libraries are ever-changing and no tutorial post can stay up-to-date with that. Every library version that our project depends on will be provided here – in case of any trouble, please set your dependencies to exact versions as listed in tutorial, to prevent any breaking changes in never versions.</p>
</blockquote>
<p>What you’ll need:</p>
<ul>
<li><a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html">Java Development Kit</a> 1.6 or newer (Java SE 8 recommended)</li>
<li><a href="http://developer.android.com/sdk/index.html">Android Studio</a> 1.5 or newer (2.0 recommended)</li>
</ul>
<blockquote>
<p>At the time of writing, Android Studio 2.0 is available in Preview Version and current stable version is 1.5.1.</p>
</blockquote>
<p>Please consult above links for installation instructions specific to your operating system. Java is needed to run Android Studio and compile Android source code (Open JDK is also fine). Nowadays Android Studio comes bundled with everything you need, which is IDE itself, Android <abbr title="Software Development Kit">SDK</abbr>, build tools and emulator system images.</p>
<h2 id="setup-android-studio">1. Setup Android Studio</h2>
<p>If you have fresh installation of Android Studio, you need to perform a little setup. Thankfully, new versions of <abbr title="Android Studio">AS</abbr> guide you through the whole process and default values are sane and useful.</p>
<h3 id="import-previous-settings">Import previous settings</h3>
<p>In case you have previous version of <abbr title="Android Studio">AS</abbr> already installed, you can choose to import settings. Following section assumes, you don’t.</p>
<img width="400" src="https://dl.dropboxusercontent.com/u/20220/adamjodlowski.github.io/android/how-to-get-started/Screenshot%202015-12-20%2012.32.00.png">
<p>If you had Android <abbr title="Software Development Kit">SDK</abbr> already installed on your machine, you should see this information:</p>
<img width="600" src="https://dl.dropboxusercontent.com/u/20220/adamjodlowski.github.io/android/how-to-get-started/Screenshot%202015-12-20%2012.32.11.png">
<p>It does what it says, follow the instructions to repair or update your current <abbr title="Software Development Kit">SDK</abbr> files.</p>
<h3 id="configure-android-studio">Configure Android Studio</h3>
<p>Let’s review and change some of the default settings, choosing the <strong>Custom Install Type</strong> option.</p>
<img width="600" src="https://dl.dropboxusercontent.com/u/20220/adamjodlowski.github.io/android/how-to-get-started/Screenshot%202015-12-20%2012.32.21.png">
<p>In the next step, you should choose <strong>Darcula</strong> theme, which is modern and easier on the eyes than the default one. All tutorial screenshots will be created using this theme.</p>
<img width="600" src="https://dl.dropboxusercontent.com/u/20220/adamjodlowski.github.io/android/how-to-get-started/Screenshot%202015-12-20%2012.32.27.png">
<h3 id="download-sdk-android-platform-and-virtual-device-files">Download <abbr title="Software Development Kit">SDK</abbr>, Android platform and Virtual Device files</h3>
<p>The following components are essential to your development process:</p>
<ul>
<li>Android <abbr title="Software Development Kit">SDK</abbr> – base Software Development Kit, meaning custom API libraries that interact with Android devices on application’s behalf<sup class="footnote-ref"><a href="#fn1" id="fnref1">1</a></sup></li>
<li>Android Platform – Android operating system in a specific version (23 in the screenshot) that allows you to run applications compiled using <abbr title="Software Development Kit">SDK</abbr> and have access to features introduced in that version</li>
<li>Android Virtual Device – also called an emulator – piece of software that emulates real hardware with Android installed operating system. This allows you to run and test your applications without having physical device.</li>
</ul>
<img width="600" src="https://dl.dropboxusercontent.com/u/20220/adamjodlowski.github.io/android/how-to-get-started/Screenshot%202015-12-20%2012.32.56.png">
<blockquote>
<p>Notice that in our example, setup wizard is going to download only necessary components, because some were already available on the machine.</p>
</blockquote>
<p>Emulator needs to know how many memory it can allocate, the rule of thumb is <em>more memory is better than less</em> so we’ll pick 4GB, but 2GB or less is also fine.</p>
<img width="600" src="https://dl.dropboxusercontent.com/u/20220/adamjodlowski.github.io/android/how-to-get-started/Screenshot%202015-12-20%2012.33.14.png">
<p>Review screen allows you to have a final look at install settings.</p>
<img width="600" src="https://dl.dropboxusercontent.com/u/20220/adamjodlowski.github.io/android/how-to-get-started/Screenshot%202015-12-20%2012.33.31.png">
<p>After finishing, the installation begins. You can see what particular packages are downloaded.</p>
<img width="600" src="https://dl.dropboxusercontent.com/u/20220/adamjodlowski.github.io/android/how-to-get-started/Screenshot%202015-12-20%2012.35.35.png">
<h2 id="create-new-project">2. Create new project</h2>
<p>Welcome screen shows current software version (<abbr title="Android Studio">AS</abbr> 1.5.1 in the example) and few basic options to get you started. Click the highlighted option in order to create new project. Recent project list is empty, because we have no other projects.</p>
<p>As you can see, in addition to creating new project, you can open and import an existing one, check out from version control, and import Android code sample.</p>
<img width="600" src="https://dl.dropboxusercontent.com/u/20220/adamjodlowski.github.io/android/how-to-get-started/Screenshot%202015-12-20%2012.46.54.png">
<img width="600" src="https://dl.dropboxusercontent.com/u/20220/adamjodlowski.github.io/android/how-to-get-started/Screenshot%202015-12-20%2012.47.11.png">
<p>In <em>New Project window</em> fill out the input boxes as you wish. Example application’s name is  <strong>Playground</strong>. Android projects follow Java convention and keep source code organized within packages. Main package canonical name for our application is <strong>io.github.adamjodlowski.playground</strong> and this value is extremely important for various reasons. Three of them would be:</p>
<ul>
<li>application main package name distinguishes it from other applications on <a href="https://play.google.com/store/apps">Google Play Store</a></li>
<li>it’s associated with your application that lives alongside others on Android device, allows for efficient and secure communication between your own application components and external ones – for instance, for purpose of exchanging data between them</li>
<li>is necessary to properly configure your application via <strong>Android Manifest</strong> which we’ll come back to later on</li>
</ul>
<img width="600" src="https://dl.dropboxusercontent.com/u/20220/adamjodlowski.github.io/android/how-to-get-started/Screenshot%202015-12-20%2012.47.14.png">
<p>Because of Android’s design and flexible configuration possibilities, it’s present on wide range of form factors and manufacturer brands. Let’s leave this option default, choosing <strong>Phone and Tablet</strong> variant with <strong>Minimum <abbr title="Software Development Kit">SDK</abbr></strong> set to 15. Because of this decision, our application will be compatible with every Android device operating operating system in version 4.0.3 (Ice Cream Sandwitch) and later. This is reasonable decision these days, as you can see, we are given additional rationale coming from IDE and Google Play Store.</p>
<blockquote>
<p>Android is being constantly developed. New platform versions (<abbr title="Software Development Kit">SDK</abbr> from programmer’s perspective) are being published, in order to fix bugs and provide additional functionalities. New devices come with current platforms, older ones are updated or stay as they were. To give an example, let’s say you build your application with minimum <abbr title="Software Development Kit">SDK</abbr> equal to 15 and have two devices with platform 23 and older one with platform 8:</p>
<ul>
<li>we need to use only<sup class="footnote-ref"><a href="#fn2" id="fnref2">2</a></sup> features available up to platform 15, because this is the minimum our app is said to be compliant with</li>
<li>application can be installed on device with platform version 23, but there are many features added along the way which we don’t use, because we need to provide compatibility with all platforms from 15 to 23</li>
<li>application can not be installed on platform 8, because it’s lower than the minimum – API features added later are missing</li>
</ul>
</blockquote>
<blockquote>
<p>Feel free to lower the <em>minimum <abbr title="Software Development Kit">SDK</abbr></em> version if you’re certain it’s necessary.</p>
</blockquote>
<blockquote>
<p>Android is backward compatible, so applications written for older platforms will work on newer ones, but default behaviors might change and affect our apps.</p>
</blockquote>
<img width="600" src="https://dl.dropboxusercontent.com/u/20220/adamjodlowski.github.io/android/how-to-get-started/Screenshot%202015-12-20%2012.47.18.png">
<p>In this step we’re going to pick <strong>Empty Activity</strong>, so the generated code is less complicated. As a matter of fact, you can add custom components at every point during development so these mini creators are really for getting to know basic types of navigation and application structure or really simple projects.</p>
<img width="600" src="https://dl.dropboxusercontent.com/u/20220/adamjodlowski.github.io/android/how-to-get-started/Screenshot%202015-12-20%2012.47.34.png">
<p>You can think of an <strong>Activity</strong> as a main building block of an application, representing one <em>window</em> of User Interface. Having at least one Activity is not necessary for an application, but this is almost always the case. This screen allows you to customize first (and only, for now) Activity and you can already see conventions used in Android:</p>
<ul>
<li>Activities are named as such: MyName<em>Activity</em></li>
<li>layouts corresponding to activities are named: <em>activity_MyName</em></li>
</ul>
<blockquote>
<p>Layout is an <code>.xml</code> file representing visual components in declarative style, most often corresponding to one Activity which contains the <em>activity screen’s</em> application logic, in imperative code (<code>.java</code> file).</p>
</blockquote>
<img width="740" src="https://dl.dropboxusercontent.com/u/20220/adamjodlowski.github.io/android/how-to-get-started/Screenshot%202015-12-20%2012.48.41.png">
<p>If everything went okay, you should now see the main Android Studio view with your main activity source file opened.</p>
<blockquote>
<p>Android Studio is built on top of <a href="https://www.jetbrains.com/idea/">IntelliJ IDEA</a>, if you’re already familiar with that tool, you should feel at home.</p>
</blockquote>
<blockquote>
<p>If your window doesn’t look similar to what’s in the screenshots or if you accidentally closed important panel, reset to default settings by clicking <strong>Window &gt; Restore Default Layout</strong> in main menu bar at the top.</p>
</blockquote>
<p>Switch to <code>activity_main.xml</code> file by clicking on the top bar with current files.</p>
<img width="740" src="https://dl.dropboxusercontent.com/u/20220/adamjodlowski.github.io/android/how-to-get-started/Screenshot%202015-12-20%2012.49.44.png">
<p>What you see by default is layout visual editor, denoted by <strong>Design</strong> bottom tab. This is how your Activity is going to look like on this particular emulated device, in this case <em>Nexus 4 with platform 23 in landscape mode</em>. Next to it at the bottom there is a tab <strong>Text</strong>, select it.</p>
<img width="740" src="https://dl.dropboxusercontent.com/u/20220/adamjodlowski.github.io/android/how-to-get-started/Screenshot%202015-12-20%2017.00.50.png">
<p>You should see XML representation of the same layout, in form of an <code>activity_main.xml</code> file. If you’re not familiar with XML, you can refer to <a href="https://en.wikipedia.org/wiki/XML">Wikipedia</a>. Layout files consist of actual <em>Layouts</em> (they coordinate alignment and positions of their children) and <em>Widgets</em> (basic visual building blocks – button, labels, etc.).</p>
<p>Edit highlighted text in <code>TextView</code> node, <code>android:text</code> property to <em>Android Studio base project</em>. Hopefully you can already see changes being done on the fly to preview on the right.</p>
<img width="740" src="https://dl.dropboxusercontent.com/u/20220/adamjodlowski.github.io/android/how-to-get-started/Screenshot%202015-12-20%2012.51.16.png">
<img width="740" src="https://dl.dropboxusercontent.com/u/20220/adamjodlowski.github.io/android/how-to-get-started/Screenshot%202015-12-20%2017.02.51.png">
<p>It looks like <abbr title="Android Studio">AS</abbr> has some tips for us regarding the highlighted line of XML, hover over it and click <em>more…</em> next to warning message to expand it. It says we should not hardcode strings in source code, which is another convention and good practice for various reasons. Click on the yellow lightbulb on the left of problematic line and choose <strong>extract string resource</strong>.</p>
<blockquote>
<p>This <em>quick fix</em> is one of many available in <abbr title="Android Studio">AS</abbr>. Pay close attention to warnings such as that – they can range from not optimal syntax structures to bad design choices impacting application performance. XML files are not validated like Java code by compiler, so the vast majority of work is done by lint rules defined for Android projects.</p>
</blockquote>
<img width="740" src="https://dl.dropboxusercontent.com/u/20220/adamjodlowski.github.io/android/how-to-get-started/Screenshot%202015-12-20%2017.04.08.png">
<img width="740" src="https://dl.dropboxusercontent.com/u/20220/adamjodlowski.github.io/android/how-to-get-started/Screenshot%202015-12-20%2017.04.50.png">
<p>Give a meaningful name to a resource being extracted. Entry will be created in file <code>strings.xml</code> vital to every Android application.</p>
<p>Command-click (on OS X, or control-click on Windows &amp; Linux) on <code>@string/header</code> which we have just extracted, or open file <code>strings.xml</code> from Project Explorer on the left (it’s located in <code>/app/src/main/res/values/</code>).</p>
<img width="740" src="https://dl.dropboxusercontent.com/u/20220/adamjodlowski.github.io/android/how-to-get-started/Screenshot%202015-12-20%2019.57.16.png">
<img width="740" src="https://dl.dropboxusercontent.com/u/20220/adamjodlowski.github.io/android/how-to-get-started/Screenshot%202015-12-20%2017.05.17.png">
<p>What you see is one of many <em>resource files</em> which contains string resources. Every resource has a type (<code>string</code>), name (<code>header</code>) and value (<code>Android Studio base project</code>). You can open other resource files, <code>colors.xml</code> and <code>styles.xml</code> to see what they look like.</p>
<blockquote>
<p>Android Studio contains a lot of useful tools, wizards and contextual editors. Entering <code>strings.xml</code> file gives you the option to go straight to <em>Translations Editor</em> that is helpful for working with translations. This is one of many examples of making programmer’s life easier.</p>
</blockquote>
<h2 id="edit-source-code">3. Edit source code</h2>
<p>So far we’ve changed one TextView’s text. Let’s add interactive component in form of a button to our application.</p>
<p>Switch to <code>activity_main.xml</code> file and go to visual <strong>Design</strong> tab.</p>
<p>From the <strong>Palette</strong> section, drag and drop <strong>Button</strong> widget onto layout preview.</p>
<img width="740" src="https://dl.dropboxusercontent.com/u/20220/adamjodlowski.github.io/android/how-to-get-started/Screenshot%202015-12-20%2020.15.34.png">
<p>You’ve added <strong>Button View</strong> to Main Activity’s layout. From the right <strong>Properties</strong> section you can directly edit all properties available to selected View. Above that there’s <strong>Component Tree</strong> which shows view hierarchy and highlights where you currently are. This is a powerful visual tool, in case you prefer raw XML editing, you can still do that by switching to <em>Text</em> tab.</p>
<p>Switch to XML view and look for <code>Button</code> node which should look similar to this:</p>
<pre class=" language-xml"><code class="prism  language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>RelativeLayout</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span>
    <span class="token attr-name"><span class="token namespace">xmlns:</span>tools</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.android.com/tools<span class="token punctuation">"</span></span>
    <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>
    <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>
    <span class="token attr-name"><span class="token namespace">android:</span>paddingBottom</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@dimen/activity_vertical_margin<span class="token punctuation">"</span></span>
    <span class="token attr-name"><span class="token namespace">android:</span>paddingLeft</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@dimen/activity_horizontal_margin<span class="token punctuation">"</span></span>
    <span class="token attr-name"><span class="token namespace">android:</span>paddingRight</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@dimen/activity_horizontal_margin<span class="token punctuation">"</span></span>
    <span class="token attr-name"><span class="token namespace">android:</span>paddingTop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@dimen/activity_vertical_margin<span class="token punctuation">"</span></span>
    <span class="token attr-name"><span class="token namespace">tools:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>io.github.adamjodlowski.playground.MainActivity<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextView</span>
        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>
        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>
        <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@string/header<span class="token punctuation">"</span></span>
        <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/textView<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span>
        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>
        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>
        <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>New Button<span class="token punctuation">"</span></span>
        <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/button<span class="token punctuation">"</span></span>
        <span class="token attr-name"><span class="token namespace">android:</span>layout_below</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/textView<span class="token punctuation">"</span></span>
        <span class="token attr-name"><span class="token namespace">android:</span>layout_alignParentLeft</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span>
        <span class="token attr-name"><span class="token namespace">android:</span>layout_alignParentStart</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span>
        <span class="token attr-name"><span class="token namespace">android:</span>layout_marginTop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>42dp<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>RelativeLayout</span><span class="token punctuation">&gt;</span></span>
</code></pre>
<p>We’ll focus on newly added Button section. It says that there is a Button widget defined with following properties, from top to bottom:</p>
<ul>
<li>width and height should be just enough to fit content, in case of a Button, its text, margin and padding (if applicable)</li>
<li>text displayed by the button</li>
<li>crucial property <strong>id</strong> is set to <strong>button</strong> (we’ll need it in a moment)</li>
<li>it should be positioned below another component in the layout with <strong>id</strong> equal to <strong>textView</strong></li>
<li>should be aligned to it’s parent <em>left</em> and <em>start</em></li>
<li>should have top margin of 42 dp<sup class="footnote-ref"><a href="#fn3" id="fnref3">3</a></sup></li>
</ul>
<p>Those two widgets are wrapped in <strong>Relative Layout</strong>, most flexible layout used in Android.</p>
<blockquote>
<p><code>android:id="@+id/button"</code> reads: property <code>id</code> from namespace <code>android</code> has value <code>@+id/button</code> which itself is a <em>resource property</em> (<code>@</code>) of <em>type id</em> (<code>id</code>) with value <code>button</code>. Plus sign <code>+</code> is applicable to <em>id resources</em> and means that if this particular value is not defined already, it should be added to known identifiers.</p>
</blockquote>
<p>Switch to <code>MainActivity.java</code> and make the <code>onCreate</code> method look like in the listing below. Don’t forget to import needed classes and pay close attention to any warnings that might appear while you type:</p>
<pre class=" language-java"><code class="prism  language-java"><span class="token keyword">package</span> io<span class="token punctuation">.</span>github<span class="token punctuation">.</span>adamjodlowski<span class="token punctuation">.</span>playground<span class="token punctuation">;</span>

<span class="token keyword">import</span> android<span class="token punctuation">.</span>support<span class="token punctuation">.</span>v7<span class="token punctuation">.</span>app<span class="token punctuation">.</span>AppCompatActivity<span class="token punctuation">;</span>
<span class="token keyword">import</span> android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>Bundle<span class="token punctuation">;</span>
<span class="token keyword">import</span> android<span class="token punctuation">.</span>view<span class="token punctuation">.</span>View<span class="token punctuation">;</span>
<span class="token keyword">import</span> android<span class="token punctuation">.</span>widget<span class="token punctuation">.</span>Button<span class="token punctuation">;</span>
<span class="token keyword">import</span> android<span class="token punctuation">.</span>widget<span class="token punctuation">.</span>TextView<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainActivity</span> <span class="token keyword">extends</span> <span class="token class-name">AppCompatActivity</span> <span class="token punctuation">{</span>

    TextView textView<span class="token punctuation">;</span>

    @Override
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate<span class="token punctuation">(</span></span>Bundle savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate<span class="token punctuation">(</span></span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">setContentView<span class="token punctuation">(</span></span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_main<span class="token punctuation">)</span><span class="token punctuation">;</span>

        textView <span class="token operator">=</span> <span class="token punctuation">(</span>TextView<span class="token punctuation">)</span> <span class="token function">findViewById<span class="token punctuation">(</span></span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>textView<span class="token punctuation">)</span><span class="token punctuation">;</span>

        Button button <span class="token operator">=</span> <span class="token punctuation">(</span>Button<span class="token punctuation">)</span> <span class="token function">findViewById<span class="token punctuation">(</span></span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>button<span class="token punctuation">)</span><span class="token punctuation">;</span>
        button<span class="token punctuation">.</span><span class="token function">setOnClickListener<span class="token punctuation">(</span></span><span class="token keyword">new</span> <span class="token class-name">View<span class="token punctuation">.</span>OnClickListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            @Override
            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick<span class="token punctuation">(</span></span>View v<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                textView<span class="token punctuation">.</span><span class="token function">setText<span class="token punctuation">(</span></span><span class="token string">"It works!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>What this code does, from top to bottom:</p>
<ul>
<li>imports necessary classes, you should be able to guess what some of them are</li>
<li>declares <strong>MainActivity</strong> class extending <strong>AppCompatActivity</strong> – you’ll see this often – in order to get access to Android framework and reach outside sandbox that our application live in, we need to extend or obtain instances of framework classes (<em>AppCompat</em> prefix says it comes from Support Library, backporting some of the features to older platforms)</li>
<li>declares textView field of the type <strong>TextView</strong></li>
<li>overrides <code>onCreate</code> method, which is one of many methods where you can perform activity initialization</li>
<li><code>setContentView</code> method takes identifier of activity’s layout file in form of autogenerated <em>layout resource</em> identifier (it corresponds to the actual file named <code>activity_main.xml</code>) – this layout will be <em>inflated</em> to represent visual interface of the activity</li>
<li>textView field is set to contain what is returned from <code>findViewById</code> method – see what actual type is returned from that method and think why the typecasting is needed here<sup class="footnote-ref"><a href="#fn4" id="fnref4">4</a></sup></li>
<li>handle to Button object is obtained and click listener is set – it will set text on the TextView when clicked</li>
</ul>
<blockquote>
<p>Now you see what we need <em>id</em> values for – every framework component (visual widget, resource file, etc.) needs to have an ID in order to reference it by other component.</p>
</blockquote>
<blockquote>
<p>Notice the use of anonymous class of type <code>View.OnClickListener</code>, this approach is ubiquitous in Android programming.</p>
</blockquote>
<h2 id="run-the-application-on-emulator">4. Run the application on emulator</h2>
<p>Click the green <em>play icon</em> or choose <strong>Run &gt; Run ‘app’</strong> option form the main menu. You’ll see chooser dialog which allows us to pick specific emulator or physical device to run our application on.</p>
<img width="740" src="https://dl.dropboxusercontent.com/u/20220/adamjodlowski.github.io/android/how-to-get-started/Screenshot%202015-12-20%2021.01.36.png">
<p>Select <strong>Launch emulator</strong> option if you don’t already have one running. You should have the default <strong>Nexus 5 API 23 x86</strong> or similar already installed. If not, click the <em>three dot</em> button above the <strong>OK</strong> button to go the <strong>Android Virtual Device Manager</strong>. Click on <strong>Create Virtual Device</strong>, pick any hardware profile you like.</p>
<img width="740" src="https://dl.dropboxusercontent.com/u/20220/adamjodlowski.github.io/android/how-to-get-started/Screenshot%202015-12-20%2021.08.59.png">
<blockquote>
<p>You should always test your application on few different platform versions, form factor, language settings etc. Emulators allow us to do that at no cost of buying physical devices.</p>
</blockquote>
<p>Select <strong>System Image</strong>, going for default is fine.</p>
<img width="740" src="https://dl.dropboxusercontent.com/u/20220/adamjodlowski.github.io/android/how-to-get-started/Screenshot%202015-12-20%2021.10.58.png">
<p>Last screen allows for further customization, again defaults are okay.</p>
<img width="740" src="https://dl.dropboxusercontent.com/u/20220/adamjodlowski.github.io/android/how-to-get-started/Screenshot%202015-12-20%2021.11.04.png">
<p>Create <abbr title="Android Virtual Device">AVD</abbr> and rerun application choosing desired emulator from dialog. New window should appear and after quick moment of initialization, you should see emulator window.</p>
<img width="400" src="https://dl.dropboxusercontent.com/u/20220/adamjodlowski.github.io/android/how-to-get-started/Screenshot%202015-12-20%2021.16.13.png">
<blockquote>
<p>If you don’t see your application, run it again so it pops up in the foreground. In case there are any problems with building or running, you’ll se warnings or errors in Android Studio bottom section.</p>
</blockquote>
<img width="740" src="https://dl.dropboxusercontent.com/u/20220/adamjodlowski.github.io/android/how-to-get-started/Screenshot%202015-12-20%2021.20.07.png">
<p>Green popup tells us the application has been successfully installed and launched on emulator. Entire bottom section is an <strong>Android Monitor</strong> with active tab <strong>Logcat</strong> which is Android console logger window.</p>
<p>Click on the <strong>NEW BUTTON</strong> button, the text above should change to “It works!”. If it does, congratulations on your first working Android Application.</p>
<img width="740" src="https://dl.dropboxusercontent.com/u/20220/adamjodlowski.github.io/android/how-to-get-started/Screenshot%202015-12-20%2021.17.20.png">
<h2 id="android-manifest--build.gradle">5. Android Manifest &amp; build.gradle</h2>
<p>How is this all possible? How does Android operating system know it should run your MainActivity when you open the app? Look for a file <code>AndroidManifest.xml</code> in <code>/app/src/main/</code> directory. It is the main Android configuration file, it should look like this:</p>
<pre class=" language-xml"><code class="prism  language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>manifest</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span>
    <span class="token attr-name">package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>io.github.adamjodlowski.playground<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>application</span>
        <span class="token attr-name"><span class="token namespace">android:</span>allowBackup</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span>
        <span class="token attr-name"><span class="token namespace">android:</span>icon</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@mipmap/ic_launcher<span class="token punctuation">"</span></span>
        <span class="token attr-name"><span class="token namespace">android:</span>label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@string/app_name<span class="token punctuation">"</span></span>
        <span class="token attr-name"><span class="token namespace">android:</span>supportsRtl</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span>
        <span class="token attr-name"><span class="token namespace">android:</span>theme</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@style/AppTheme<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activity</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>.MainActivity<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>intent-filter</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>action</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>android.intent.action.MAIN<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>category</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>android.intent.category.LAUNCHER<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>intent-filter</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activity</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>application</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>manifest</span><span class="token punctuation">&gt;</span></span>
</code></pre>
<p>Here we declare all main building blocks of Android applications, such as Activities. You can have as many Activites in <code>.java</code> files in your project, but as long as you don’t declare them here, they won’t be usable. Example file says, that:</p>
<ul>
<li>main application package is <code>io.github.adamjodlowski.playground</code></li>
<li>application has one activity</li>
<li>Java class for that activity containing application logic is <code>[io.github.adamjodlowski.playground].MainActivity[.java]</code></li>
<li><code>&lt;intent-filter&gt;</code> section says, that this activity should be entry point to the entire application and should be accessible through system application launcher</li>
</ul>
<p>Second configuration file responsible for build process and managind third party dependencies is <code>/app/build.gradle</code>:</p>
<pre class=" language-java"><code class="prism  language-java">apply plugin<span class="token operator">:</span> <span class="token string">'com.android.application'</span>

android <span class="token punctuation">{</span>
    compileSdkVersion <span class="token number">23</span>
    buildToolsVersion <span class="token string">"23.0.2"</span>

    defaultConfig <span class="token punctuation">{</span>
        applicationId <span class="token string">"io.github.adamjodlowski.playground"</span>
        minSdkVersion <span class="token number">15</span>
        targetSdkVersion <span class="token number">23</span>
        versionCode <span class="token number">1</span>
        versionName <span class="token string">"1.0"</span>
    <span class="token punctuation">}</span>
    buildTypes <span class="token punctuation">{</span>
        release <span class="token punctuation">{</span>
            minifyEnabled <span class="token boolean">false</span>
            proguardFiles <span class="token function">getDefaultProguardFile<span class="token punctuation">(</span></span><span class="token string">'proguard-android.txt'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'proguard-rules.pro'</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

dependencies <span class="token punctuation">{</span>
    compile <span class="token function">fileTree<span class="token punctuation">(</span></span>dir<span class="token operator">:</span> <span class="token string">'libs'</span><span class="token punctuation">,</span> include<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'*.jar'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    testCompile <span class="token string">'junit:junit:4.12'</span>
    compile <span class="token string">'com.android.support:appcompat-v7:23.1.1'</span>
<span class="token punctuation">}</span>

</code></pre>
<p>Hopefully you can guess what those properties are. One thing we didn’t mention is <code>targetSdkVersion 23</code> which means, that although <code>minSdkVersion</code> is equal to 15, new platforms running our application <strong>should not</strong> try to backport default behaviors to level 15. Instead they should provide behaviors defined for level 23, for example default visual styles of built-in system widgets (buttons, alert dialogs, etc.).</p>
<p><strong>Dependencies</strong> section contains third party libraries build using Gradle Build System, you’ll need to add every custom library that your app depends on there.</p>
<h2 id="summary">Summary</h2>
<p>In this tutorial you learned how to configure fresh installation of Android Studio, setup example project, configure and run emulator, make changes to source code and successfully run your application on Android emulator.</p>
<hr class="footnotes-sep">
<section class="footnotes">
<ol class="footnotes-list">
<li id="fn1" class="footnote-item"><p>Android applications are sandboxed and usually don’t interact directly with underlying operating system or hardware. <a href="#fnref1" class="footnote-backref">↩</a></p>
</li>
<li id="fn2" class="footnote-item"><p>This is not true anymore, thanks to Support Library and feature backporting. But it is a default case if we don’t use those additional tools. <a href="#fnref2" class="footnote-backref">↩</a></p>
</li>
<li id="fn3" class="footnote-item"><p><strong>dp</strong> stands for Density Independent Pixels and is the default and only correct way of defining margins, sizes, etc. in Android. You can think of it as pixels relative to density of particular physical display which may vary. <a href="#fnref3" class="footnote-backref">↩</a></p>
</li>
<li id="fn4" class="footnote-item"><p><code>findViewById</code> returns View which is superclass to TextView, Button, etc. We need to operate on more concrete type so we perform the typecasting. <a href="#fnref4" class="footnote-backref">↩</a></p>
</li>
</ol>
</section></div></body>
</html>